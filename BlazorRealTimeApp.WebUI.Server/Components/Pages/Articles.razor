@page "/articles"

@inject ISender Sender
@inject NavigationManager Navigation
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Articles</PageTitle>
<h3>Articles</h3>

@if (articles.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Content</th>
                <th>Date Published</th>
                <th>Is Published</th>                
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>@article.Title</td>
                    <td>@article.Content</td>
                    <td>@article.DatePublished.ToShortDateString()</td>
                    <td>@article.IsPublished</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Article> articles = new();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        // SignalR kapcsolat létrehozása és eseménykezelő beállítása
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.BaseUri + "datahub") // A SignalR Hub elérési útja
            .Build();

        hubConnection.On<string>("ReceiveUpdate", async (message) =>
        {
            Console.WriteLine("Frissítés érkezett: " + message);
            await LoadData(); // 🔄 Újra betölti az adatokat
            StateHasChanged(); // 📌 UI frissítése
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadData()
    {
        var result = await Sender.Send(new GetAllArticlesQuery());
        if (result is not null)
            articles = result;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
