@page "/articles"

@inject ISender Sender
@inject NavigationManager Navigation
@inject ILogger<Articles> Logger
@inject IJSRuntime JS
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Articles</PageTitle>
<h3>Articles</h3>

@if (articles.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Content</th>
                <th>Date Published</th>
                <th>Is Published</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>@article.Title</td>
                    <td>@article.Content</td>
                    <td>@article.DatePublished.ToShortDateString()</td>
                    <td>@article.IsPublished</td>
                    <td><button class="btn btn-primary" @onclick="() => EditHandler(article.Id)">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Article> articles = new();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Articles.razor | Initializing Articles component");
        Console.WriteLine("🔄 Articles.razor | Initializing Articles component"); // Kliens oldali log

        await LoadData();

        Logger.LogInformation($"Articles.razor | Connecting to SignalR hub. URL: {Navigation.BaseUri}datahub");

        // SignalR kapcsolat létrehozása és eseménykezelő beállítása
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.BaseUri + "datahub") // A SignalR Hub elérési útja
            .Build();

        hubConnection.On<string>("ReceiveUpdate", async (message) =>
        {
            Logger.LogInformation("Articles.razor | Received update: {Message}", message);
            await RefreshData(); // 🔄 Adatok frissítése
        });

        hubConnection.Closed += async (error) =>
        {
            Logger.LogError(error, "Articles.razor | SignalR connection closed with error");
            await Task.Delay(new Random().Next(0, 5) * 1000);
            await hubConnection.StartAsync();
            Logger.LogInformation("Articles.razor | SignalR connection restarted");
        };

        await hubConnection.StartAsync();
        Logger.LogInformation("Articles.razor | SignalR connection started");
    }

    private async Task RefreshData()
    {
        await LoadData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadData()
    {
        Logger.LogInformation("Articles.razor | Loading articles data");

        var result = await Sender.Send(new GetAllArticlesQuery());

        if (result is not null)
        {
            articles = new List<Article>(result); // 🔄 Új példány létrehozása
            Logger.LogInformation("Articles list after update: {Articles}", string.Join(", ", articles.Select(a => a.Title)));
        }
        else
        {
            Logger.LogWarning("Articles.razor | No articles received from the server!");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            Logger.LogInformation("Articles.razor | Disposing SignalR connection");
            await hubConnection.DisposeAsync();
        }
    }

    private void EditHandler(int articleId)
    {
        Logger.LogInformation("Articles.razor | Navigating to edit article: {ArticleId}", articleId);
        Navigation.NavigateTo($"/articles/edit-article/{articleId}");
    }
}
