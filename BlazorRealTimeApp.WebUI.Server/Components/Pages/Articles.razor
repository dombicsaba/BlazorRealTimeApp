@page "/articles"

@inject ISender Sender
@inject NavigationManager Navigation
@inject ILogger<Articles> Logger
@inject IJSRuntime JS
@implements IAsyncDisposable
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Articles</PageTitle>
<h3>Articles</h3>

@if (articles.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Content</th>
                <th>Date Published</th>
                <th>Is Published</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>@article.Title</td>
                    <td>@article.Content</td>
                    <td>@article.DatePublished.ToShortDateString()</td>
                    <td>@article.IsPublished</td>
                    <td><button class="btn btn-primary" @onclick="() => EditHandler(article.Id)">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Article> articles = new();
    private HubConnection? hubConnection;
    private string? clientId;
    private bool isRendered = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Articles.razor | Initializing Articles component");

        await LoadData(); 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && hubConnection is null)
        {
            Logger.LogInformation($"Articles.razor | Connecting to SignalR hub. URL: {Navigation.BaseUri}datahub");

            clientId = await JS.InvokeAsync<string>("getClientId");

            if (string.IsNullOrEmpty(clientId))
            {
                clientId = Guid.NewGuid().ToString();
                await JS.InvokeVoidAsync("setClientId", clientId);
            }

            hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.BaseUri + "datahub", options =>
            {
                options.Headers.Add("ClientIdentifier", clientId);
            })
            .WithAutomaticReconnect()
            .Build();

            hubConnection.On<string>("ReceiveUpdate", async (message) =>
             {
                 await RefreshData(); // 🔄 Adatok frissítése
                 Logger.LogInformation("Articles.razor | ClientId: {ClientId} | Received update: {Message}", clientId, message);
             });

            await hubConnection.StartAsync();
            Logger.LogInformation("Articles.razor | SignalR connection started");
            isRendered = true;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
        Logger.LogInformation("Articles.razor | ClientId: {ClientId} | Refreshing articles data", clientId);
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadData()
    {
        Logger.LogInformation("Articles.razor | ClientId: {ClientId} | Loading articles data", clientId);

        var result = await Sender.Send(new GetAllArticlesQuery());

        if (result is not null)
        {
            articles = new List<Article>(result); // 🔄 Új példány létrehozása
            Logger.LogInformation("Articles list after update: {Articles}", string.Join(", ", articles.Select(a => a.Title)));
        }
        else
        {
            Logger.LogWarning("Articles.razor | No articles received from the server!");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
            hubConnection = null;
            Logger.LogInformation("Articles.razor | Disposing SignalR connection");
        }
    }

    private void EditHandler(int articleId)
    {
        Logger.LogInformation("Articles.razor | Navigating to edit article: {ArticleId}", articleId);
        Navigation.NavigateTo($"/articles/edit-article/{articleId}");
    }
}
